#pragma checksum "C:\Users\Njacsen\source\repos\TaskManager\TaskManager\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "29bf65736f28a5bc38e6e8ee9c010af46a5f3cef"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Index.cshtml", typeof(AspNetCore.Views_Home_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"29bf65736f28a5bc38e6e8ee9c010af46a5f3cef", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a9af4978b9c2bfca24ef48e96efe5f8573634464", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IEnumerable<TaskManager.Models.Tasks>>
    {
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(46, 27, true);
            WriteLiteral("<!DOCTYPE html>\r\n\r\n<html>\r\n");
            EndContext();
            BeginContext(73, 10895, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "12f217a1244443f099b34617afb74ad4", async() => {
                BeginContext(79, 10882, true);
                WriteLiteral(@"
    <title>Scheduler</title>
    <style>
        .inwidth {
            width: 100%;
            box-sizing: border-box;
            border: none;
            border-bottom: 0.75px solid #aaa;
            background-position: 10px 10px;
            background-repeat: no-repeat;
            padding: 12px 20px 12px 20px;
            resize: none;
        }

            .inwidth:focus {
                outline: none;
                border-bottom-color: #666;
            }

        .pick {
            margin: 13px 0;
            padding: 0 15px;
        }

        .pick-span {
            display: block;
            font-size: 15px;
            margin-right: 7px;
            margin-bottom: 7px;
        }

        .pick > input {
            color: #666;
        }

        textarea {
            border: 1px solid #ddd;
            outline: none;
            border-radius: 5px;
            margin: 15px 0;
            resize: none !important;
            width: 100%;
     ");
                WriteLiteral(@"       padding: 8px;
            height: 100px;
        }

            textarea:focus {
                border: 1px solid #aaa;
                outline: none;
            }
    </style>

    <link href=""https://cdn.jsdelivr.net/npm/fullcalendar@5.3.0/main.css"" rel=""stylesheet"" />
    <link href=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"" rel=""stylesheet"" integrity=""sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z"" crossorigin=""anonymous"">
    <script src=""https://code.jquery.com/jquery-3.5.1.slim.min.js"" integrity=""sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"" crossorigin=""anonymous""></script>
    <script src=""https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"" integrity=""sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN"" crossorigin=""anonymous""></script>
    <script src=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"" integrity=""sha384-B4gt1jrGC7Jh4AgT");
                WriteLiteral(@"PSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV"" crossorigin=""anonymous""></script>
    <script src=""https://cdn.jsdelivr.net/npm/fullcalendar@5.3.0/main.min.js"" type='text/javascript'></script>
    <script src=""https://cdn.jsdelivr.net/npm/fullcalendar@5.3.0/locales/tr.js"" type=""text/javascript""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.27.0/moment.min.js"" integrity=""sha512-rmZcZsyhe0/MAjquhTgiUcb4d9knaFc7b5xAfju483gbEXTkeJRUMIPk6s3ySZMYUHEcjKbjLjyddGWMrNEvZg=="" crossorigin=""anonymous""></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
                var calendarEl = document.getElementById('calendar');
                var calendar = new FullCalendar.Calendar(calendarEl, {
                    headerToolbar:
                    {
                        start: 'timeGridDay,timeGridWeek,dayGridMonth', // will normally be on the left. if RTL, will be on the right
                        center: 'title',
                    ");
                WriteLiteral(@"    end: 'today prev,next' // will normally be on the right. if RTL, will be on the left
                    },
                    nowIndicator: true,
                    locale: 'tr',
                    initialView: 'dayGridMonth',
                    events: 'https://localhost:44377/api/tasks',
                    dateClick: function (info) {
                        $(""#exampleModal"").modal();
                        $('#modalTitle').text('Create New Task');
                                document.getElementById(""taskStartDate"").value = info.dateStr;
                                document.getElementById(""eventModal"").style.display = ""none"";
                                document.getElementById(""eventFooter"").style.display = ""none"";
                                document.getElementById(""updateModal"").style.display = 'none';
                                document.getElementById(""updateFooter"").style.display = ""none"";
                                document.getElementById(""createModal");
                WriteLiteral(@""").style.display = ""block"";
                                document.getElementById(""createFooter"").style.display = ""block"";
                            },
                    eventClick: function (info) {
                        $(""#exampleModal"").modal();
                        $('#modalTitle').text(info.event.title);
                        $('#taskId').text(info.event.id);
                        $('#eventStartTime').text(moment(info.event.start).format('DD-MM-YYYY kk.mm'));
                        $('#eventEndTime').text(moment(info.event.end).format('DD-MM-YYYY kk.mm'));
                        $('#eventDescription').text(info.event.extendedProps.description);
                        document.getElementById(""eventModal"").style.display = ""block"";
                        document.getElementById(""eventFooter"").style.display = ""block"";
                        document.getElementById(""updateModal"").style.display = 'none';
                        document.getElementById(""createModal"").style.disp");
                WriteLiteral(@"lay = ""none"";
                        document.getElementById(""createFooter"").style.display = ""none"";
                        document.getElementById(""updateFooter"").style.display = ""none"";
                    }
                });
                calendar.render();
            });

            $('#taskStartDate').prop('disabled', true);
            $('#taskStartTime').prop('disabled', true);
            $('#taskEndDate').prop('disabled', true);
            $('#taskEndTime').prop('disabled', true);

            function getCookie(name) {
                // Split cookie string and get all individual name=value pairs in an array
                var cookieArr = document.cookie.split("";"");

                // Loop through the array elements
                for (var i = 0; i < cookieArr.length; i++) {
                    var cookiePair = cookieArr[i].split(""="");

                    /* Removing whitespace at the beginning of the cookie name
                    and compare it with the given st");
                WriteLiteral(@"ring */
                    if (name == cookiePair[0].trim()) {
                        // Decode the cookie value and return
                        return decodeURIComponent(cookiePair[1]);
                    }
                }

                // Return null if not found
                return null;
            }




            function createTask() {
                var startTime = document.getElementById('taskStartDate').value + "" "" + document.getElementById('taskStartTime').value
                var endTime = document.getElementById('taskEndDate').value + "" "" + document.getElementById('taskEndTime').value

                var Task = {
                    title: document.getElementById('title').value,
                    Description: document.getElementById('description').value,
                    start: startTime,
                    end: endTime,
                    allDay: false,
                    Visible: true,
                }

                fetch('api/tasks', {
");
                WriteLiteral(@"                    method: 'POST',
                    credentials: ""include"",
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(Task)
                })
                    .then(response => response.json())
                    .then(() => {
                        alert('Task added successfully!')
                        location.reload()
                    })
                    .catch(error => console.error('Unable to add item.', error));
            }

            function deleteTask() {
                var taskID = document.getElementById('taskId').innerHTML
                fetch('api/tasks/' + taskID,
                    { method: 'DELETE' }
                )
                    .then(() => {
                        alert(""Task deleted successfully!"")
                        location.reload()
                    })
     ");
                WriteLiteral(@"               .catch(error => console.error('Unable to delete item.', error));
            }

            function updateButton() {
                $(""#exampleModal"").modal();
                document.getElementById(""eventModal"").style.display = ""none"";
                document.getElementById(""eventFooter"").style.display = ""none"";
                document.getElementById(""updateModal"").style.display = ""block"";
                document.getElementById(""updateFooter"").style.display = ""block"";
                document.getElementById(""updateTitle"").value = document.getElementById(""modalTitle"").textContent;
                document.getElementById(""updateDescription"").value = document.getElementById(""eventDescription"").textContent;
                document.getElementById(""currentStartTime"").innerText = document.getElementById(""eventStartTime"").innerText;
                document.getElementById(""currentEndTime"").innerText = document.getElementById(""eventEndTime"").innerText;
            }

            f");
                WriteLiteral(@"unction updateTask() {
                var startTime = document.getElementById('updateStartDate').value + "" "" + document.getElementById('updateStartTime').value
                var endTime = document.getElementById('updateEndDate').value + "" "" + document.getElementById('updateEndTime').value
                var taskID = document.getElementById('taskId').innerHTML

                var Task = {
                    id: taskID,
                    title: document.getElementById(""updateTitle"").value,
                    Description: document.getElementById(""updateDescription"").value,
                    start: startTime,
                    end: endTime,
                    allDay: false,
                    Visible: true,
                }

                if (startTime == "" "" || endTime == "" "") {

                    alert(""Please fill start time and end time"")
                }

                else {

                    fetch('api/tasks/' + taskID, {
                        method: 'PUT");
                WriteLiteral(@"',
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(Task)
                    })
                        .then(response => response.json())
                        .then(() => {
                            alert('Task updated successfully!')
                            location.reload()
                        })
                        .catch(error => console.error('Unable to add item.', error));
                }
            }
    </script>
");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(10968, 4, true);
            WriteLiteral("\r\n\r\n");
            EndContext();
            BeginContext(10972, 5117, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "bea6b012f238482081389f487ed44994", async() => {
                BeginContext(10978, 5104, true);
                WriteLiteral(@"
    <div style=""margin: 30px;"">
        <div id='calendar'></div>
        <div class=""modal fade"" id=""exampleModal"" tabindex=""-1"" aria-labelledby=""exampleModalLabel"" aria-hidden=""true"">
            <div class=""modal-dialog"">
                <div class=""modal-content"">
                    <div class=""modal-header"">
                        <h5 class=""modal-title"" id=""modalTitle""></h5>
                        <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                            <span aria-hidden=""true"">&times;</span>
                        </button>
                    </div>

                    <div class=""modal-body"" id=""createModal"" style=""display:none;"">
                        <input type=""text"" name=""title"" id=""title"" placeholder=""Title"" class=""inwidth"" />
                        <div class=""pick"">
                            <span class=""pick-span"">Start Date:</span>
                            <input type=""date"" id=""taskStartDate"" value="""" />
      ");
                WriteLiteral(@"                      <input type=""time"" id=""taskStartTime"" value="""" />
                        </div>
                        <div class=""pick"">
                            <span class=""pick-span"">End Date:</span>
                            <input type=""date"" id=""taskEndDate"" value="""" />
                            <input type=""time"" id=""taskEndTime"" value="""" />
                        </div>
                        <textarea name=""description"" placeholder=""Description"" id=""description""></textarea>
                        <span id=""startTime"" name=""startTime"" ; style=""display:none;""></span>
                        <span id=""endTime"" name=""endTime"" style=""display:none;""></span>
                    </div>
                    <div class=""modal-footer"" id=""createFooter"" style=""display:none;"">
                        <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Close</button>
                        <button type=""submit"" class=""btn btn-primary"" id=""createTask"" onclick=""create");
                WriteLiteral(@"Task()"">Create</button>
                    </div>

                    <!-- Event Picker Footer -->
                    <div class=""modal-body"" id=""eventModal"" style=""display:none;"">
                        <span id=""taskId"" style=""display:none;""></span>
                        <p><b>Start Time:</b><span class=""ml-1"" id=""eventStartTime""></span></p>
                        <p><b>End Time:</b><span class=""ml-1"" id=""eventEndTime""></span></p>
                        <p><b>Description:</b><span class=""ml-1"" id=""eventDescription""></span></p>
                    </div>
                    <div class=""modal-footer"" id=""eventFooter"" style=""display:none;"">
                        <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Close</button>
                        <button type=""button"" class=""btn btn-primary"" onclick=""updateButton()"">Update</button>
                        <button type=""submit"" class=""btn btn-danger"" onclick=""deleteTask()"">Delete</button>
                    </div>");
                WriteLiteral(@"

                    <!-- Update Section -->
                    <div class=""modal-body"" id=""updateModal"" style=""display:none;"">
                        <input type=""text"" name=""title"" id=""updateTitle"" placeholder=""Title"" class=""inwidth"" />
                        <div class=""pick"">
                            <span class=""pick-span"">Current Start Date:</span>
                            <span style=""display:inline-block;"" id=""currentStartTime""></span>
                            <span class=""pick-span"">Current End Date:</span>
                            <span style=""display:inline-block;"" id=""currentEndTime""></span>
                        </div>
                        <div class=""pick"">
                            <span class=""pick-span"">Start Date:</span>
                            <input type=""date"" id=""updateStartDate"" value="""" />
                            <input type=""time"" id=""updateStartTime"" value="""" />
                        </div>
                        <div class=""pick"">
  ");
                WriteLiteral(@"                          <span class=""pick-span"">End Date:</span>
                            <input type=""date"" id=""updateEndDate"" value="""" />
                            <input type=""time"" id=""updateEndTime"" value="""" />
                        </div>
                        <textarea name=""description"" placeholder=""Description"" id=""updateDescription""></textarea>
                        <span id=""startTime"" name=""startTime"" ; style=""display:none;""></span>
                        <span id=""endTime"" name=""endTime"" style=""display:none;""></span>
                    </div>
                    <div class=""modal-footer"" id=""updateFooter"" style=""display:none;"">
                        <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Close</button>
                        <button type=""submit"" class=""btn btn-primary"" id=""createTask"" onclick=""updateTask()"">Update</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(16089, 11, true);
            WriteLiteral("\r\n</html>\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IEnumerable<TaskManager.Models.Tasks>> Html { get; private set; }
    }
}
#pragma warning restore 1591
